function [xhat0est, P0est, phiHist, resid_pfHist, Htilde, preFit_res] = BatchFilter(IC, NumStates, pert, P0, R, critConv, yHist, yHistRef, stationECI, visibilityMask, tVec, mu, J2, Re, omegaEarth, Area, Mass, DragRho0, r0Drag, DragH, obTime, obStat)
% Batch filter to process spaceceraft observation measurements
%
%%%%%%%%%% INPUTS %%%%%%%%%%
% IC        Initial full state and STM

% Function to help sort measurements - these are noisy measurements of ref
[observedMeas] = Measurements.FilterMeasLoadIn(yHist);

% set starting condition for filter
Xprev   = IC(1:NumStates);
STMprev = IC(NumStates+1:end);

% Build first intitial condition
XrefPrev = [Xprev; STMprev];

% iteration counter
j = 0;

% intial start for overall while loop
xhatMag = 10*critConv;

% overall convergence loop
while j < 3
    
    % update iteration counter
    j = j + 1;
    
    % set a priori estimates
    deltaR = inv(chol(P0));
    
    delta = deltaR * deltaR';
    
    % solve for initial N
    N = delta * pert;
    
    % Integrate reference trajectory and STM
    % Set integrator options
    odeOptions = odeset('AbsTol',1e-12,'RelTol', 1e-12);
    
    % Integrate Trajectory for time step
    [T, TrajNom] = ode45(@Dynamics.Numeric_J2_Drag_Prop, tVec, XrefPrev, odeOptions, Re, omegaEarth, Area, Mass, DragH, r0Drag, DragRho0);
    
    % Process each observation
    for i = 1:length(tVec)
        
        % Extract the reference trajectory states
        refTrajStates = TrajNom(i,1:NumStates);
        
        % Extract the Integrated STM - STM is by Row!
        phi = TrajNom(i,NumStates+1:end);
        
        STM = reshape(phi, [NumStates,NumStates]);
        
        % keep track of STM mapped back to time zero
        
        % --- Accumulate current observation
        % function to determine which filter observed and calc measurement
        % delta
%        [statNumOb] = Measurements.StationObs(visibilityMask, i);
        
        % Check if station made an observation
        if ismember(tVec(i), obTime)
            
            % get index of observaiton
            obInd = find(obTime == tVec(i));
            
            % get station number
            statNumOb = obStat(obInd);
            
            % Compute Htilde
            Htilde{i} = Measurements.HtildeSCProj1(refTrajStates', stationECI{obInd,statNumOb}, statNumOb);
            
            % calcualte the computed measurements
            refRangeMeas     = yHistRef.Range(obInd,statNumOb);
            refRangeRateMeas = yHistRef.RangeRate(obInd,statNumOb);
            
            compMeas = [refRangeMeas; refRangeRateMeas];
            
            % measurement delta
            measDelta(:,i) = rmmissing(observedMeas(obInd,:))' - compMeas;
            
            % propagate Htilde
            H = Htilde{i} * STM;
            
            % update delta and N
            delta = delta + H'*inv(R)*H;
            N = N + H'*inv(R)*measDelta(:,i);
        else
            % no ob given
            
        end
        
    end
    
    
    % Finished processing!
    
    % --- Solve Normal Equations
    
    % invert the information matrix, delta
    deltaCholR = chol(delta);
    
    deltaCholRinv = inv(deltaCholR);
    
    P0est = deltaCholRinv*deltaCholRinv';
    
    % solve for initial pert condition
    xhat0est = P0est*N;
    
    % magnitude of estimated x
    xhatMag = norm(xhat0est);
    
    % update and re-run the batch again!
    XrefPrev(1:NumStates) = XrefPrev(1:NumStates) + xhat0est;
    
    % Pre-fit RMS
    RMS_Rho = sqrt(sum(measDelta(1,:).^2))/length(measDelta(1,:));
    RMS_RhoDot = sqrt(sum(measDelta(2,:).^2))/length(measDelta(2,:));
    
    % Linearized post-fits
    for k = 1:length(tVec)-1
        % get STM at each step
        STM = reshape(TrajNom(k, NumStates+1:end), [NumStates, NumStates]);
        
        % prop linearized H
        H = Htilde{i} * STM;
        resid_pf(:,k) = measDelta(:,k) - H*xhat0est;
    end
    
    % post fit
    RMS_Rho_pf = sqrt(sum(resid_pf(1,:).^2)) / length(resid_pf(1,:));
    RMS_RhoDot_pf = sqrt(sum(resid_pf(2,:).^2)) / length(resid_pf(2,:));
    
    % print out what is happening
    fprintf('--- Iteration %d info: ---\n', j );
    fprintf('Pre-fit residual RMS values\n');
    fprintf('Rho    = %g km\n', RMS_Rho );
    fprintf('RhoDot = %g km\n', RMS_RhoDot );
    fprintf('Post-fit residual RMS values\n');
    fprintf('Rho    = %g km\n', RMS_Rho_pf );
    fprintf('RhoDot = %g km\n', RMS_RhoDot_pf );

    fprintf('\n---------------------------------------------\n\n');

    
end % end of obs measurements


% save off some histories
phiHist = phi;
resid_pfHist = resid_pf;

preFit_res = measDelta; 

end
