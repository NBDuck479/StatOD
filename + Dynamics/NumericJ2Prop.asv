function [ydot] = NumericJ2Prop(t,Y,mu, J2, Re)
% J2 IS 7th TERM IN STATE!!!!!
% the input Y is a column with the beginning being the states and the end
% being the STM
%--- propagate the state
ydot = zeros(6,1);
ydot(1:3,1) = Y(4:6,1);
rmag = norm(Y(1:3,1));

apertx = -((mu*Y(1,1))/(norm(Y(1:3,1)))^3)*(1-J2*(3/2)*(Re/norm(Y(1:3,1)))^2*(5*(Y(3,1)/norm(Y(1:3,1)))^2-1));
aperty = -((mu*Y(2,1))/(norm(Y(1:3,1)))^3)*(1-J2*(3/2)*(Re/norm(Y(1:3,1)))^2*(5*(Y(3,1)/norm(Y(1:3,1)))^2-1));
apertz = -((mu*Y(3,1))/(norm(Y(1:3,1)))^3)*(1-J2*(3/2)*(Re/norm(Y(1:3,1)))^2*(5*(Y(3,1)/norm(Y(1:3,1)))^2-3));

J2partial = 0;


ydot(4) = apertx;
ydot(5) = aperty;
ydot(6) = apertz;

if length(Y) == 7
    ydot(7) = J2partial;
else
    % do nothing
end

% If only wanting to propagate state then dont worry about this part
if length(Y) < 8
    % No worries, just propagating the state
else
    % going to propagate the STM too
    %--- construct A matrix to be evaluated for each new state
    x = Y(1);
    y = Y(2);
    z = Y(3);
    
    % Initialize A with zeros to make easier to fill in
    A = zeros(7,7);
    
    % velocity states map to themselves
    A(1:3, 4:6) = eye(3,3);
    
    A(4,1) = -(2*mu*(x^2 + y^2 + z^2)^3 - 6*mu*x^2*(x^2 + y^2 + z^2)^2 + 3*J2*Re^2*mu*(x^2 + y^2 + z^2)^2 + 105*J2*Re^2*mu*x^2*z^2 - 15*J2*Re^2*mu*x^2*(x^2 + y^2 + z^2) - 15*J2*Re^2*mu*z^2*(x^2 + y^2 + z^2))/(2*(x^2 + y^2 + z^2)^(9/2))

    A(5,1) = (6*mu*x*y*(x^2 + y^2 + z^2)^2 - 105*J2*Re^2*mu*x*y*z^2 + 15*J2*Re^2*mu*x*y*(x^2 + y^2 + z^2))/(2*(x^2 + y^2 + z^2)^(9/2));
    
    A(6,1) = 
    
    % partials WRT J2
    
    
    Afull = [zeros(3,3), eye(3,3), zeros(3,1); ...
        A, zeros(3,3), zeros(3,1);...
        zeros(1,7)];
    
    % Phi is the end of the Y column vector
    phiCol = Y(8:end);
    
    % reshape to be matrix
    phi = reshape(phiCol, [7,7]);
    
    % STM propagation
    phiDot = Afull * phi;
    
    
    % The state is the first part and phi is the second
    ydot(8:56) = reshape(phiDot, [49, 1]);
    
end

end
